{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Untitled6.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNbzPNH1xP//IJl33jxLYxF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MachineLearnWithRosh/FunWithTensorflow/blob/master/Tensorflow%20Tutorial%20-%20Linear%20Regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "40llAsFGUL1j",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0WTapCbhU7hm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_data = np.linspace(0.0,10.0,1000000)\n",
        "\n",
        "noise = np.random.randn(len(x_data)) #this returns the samples of Standard Normal Distribution"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VSciCJGOVu_4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#y = mx + c ; m=0.5, c=5\n",
        "y_true = (0.5 * x_data) + 5 + noise"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v_UcuaOCWdV4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_df = pd.DataFrame(data=x_data, columns=['X_data'])\n",
        "\n",
        "y_df = pd.DataFrame(data=y_true, columns=['Y'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WGSaruosW80N",
        "colab_type": "code",
        "outputId": "c8aef4be-4da7-467c-aa35-d8381d6892c9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        }
      },
      "source": [
        "print(x_df.head(5))\n",
        "\n",
        "print(\"=\"*45)\n",
        "\n",
        "print(y_df.head(5))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "    X_data\n",
            "0  0.00000\n",
            "1  0.00001\n",
            "2  0.00002\n",
            "3  0.00003\n",
            "4  0.00004\n",
            "=============================================\n",
            "          Y\n",
            "0  4.861309\n",
            "1  6.128673\n",
            "2  5.397795\n",
            "3  5.042107\n",
            "4  4.489660\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3CGEL7eOXFRZ",
        "colab_type": "code",
        "outputId": "71bf89e7-aa43-45ef-e10b-d966d74a6f75",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        }
      },
      "source": [
        "df=pd.concat([x_df,y_df],axis=1)\n",
        "\n",
        "df.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X_data</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>4.861309</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.00001</td>\n",
              "      <td>6.128673</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.00002</td>\n",
              "      <td>5.397795</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.00003</td>\n",
              "      <td>5.042107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.00004</td>\n",
              "      <td>4.489660</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    X_data         Y\n",
              "0  0.00000  4.861309\n",
              "1  0.00001  6.128673\n",
              "2  0.00002  5.397795\n",
              "3  0.00003  5.042107\n",
              "4  0.00004  4.489660"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7XJy8NzLXgpE",
        "colab_type": "code",
        "outputId": "29557152-abe1-4918-89ce-7320ee17c552",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "df.sample(n=250).plot(kind=\"scatter\",x=\"X_data\",y=\"Y\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f8873c0be10>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n5swAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dqqFChtAX6-1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "batch_size=8"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g9GnyZJ3Y5zk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "m=tf.Variable(0.5)\n",
        "b=tf.Variable(1.0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JFKAY1QxZC2q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "xph=tf.placeholder(tf.float32,[batch_size])\n",
        "yph=tf.placeholder(tf.float32,[batch_size])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WXif5Q8dZaLv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#model\n",
        "y_model = m*xph + b"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HZhRETqQaEOk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Cost Function\n",
        "error = tf.reduce_sum(tf.square(y_model-yph))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U7O3-YYZagem",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)\n",
        "train = optimizer.minimize(error)  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b7E6NoqFc2bU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "init=tf.global_variables_initializer()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "44kkCbI5bItR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "with tf.Session() as sess:\n",
        "  sess.run(init)\n",
        "\n",
        "  batches=10\n",
        "\n",
        "  for i in range(batches):\n",
        "    rand_int=np.random.randint(len(x_data),size=batch_size)\n",
        "    feed={xph:x_data[rand_int], yph:y_true[rand_int]}\n",
        "    sess.run(train, feed_dict=feed)\n",
        "  model_m,model_b = sess.run([m,b])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0ZewTc49cx4t",
        "colab_type": "code",
        "outputId": "551500d0-1de0-4af3-841c-a1f41b68bf43",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "model_b"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.2780495"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4BxnELq-dDW_",
        "colab_type": "code",
        "outputId": "d6da401c-dce7-4f7e-e839-de6df34e0d9f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "model_m"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.1612847"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rao5KZwidFFj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_hat = model_m*x_data + model_m"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZlXU0a-ndPVn",
        "colab_type": "code",
        "outputId": "e897abc3-a6af-43f4-f570-2cd3b7616883",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "df.sample(n=250).plot(kind=\"scatter\",x=\"X_data\",y=\"Y\")\n",
        "plt.plot(x_data,y_hat,'r')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f88712deb38>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEHCAYAAACp9y31AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO2dd5xU5fWHn3dmC724oEi1oCYLAuoa\nVAwixgQjEBNQo2I0KljALmAJEkT9oSixYANERYkGQaVqpFlARRdcEBYTiYWqAgJSli0z7++PuzNM\nuXfmTr2zM+f5fBR2uHvve+/MfN/znnPec5TWGkEQBCF3cDk9AEEQBCG9iPALgiDkGCL8giAIOYYI\nvyAIQo4hwi8IgpBj5Dk9ADu0aNFCH3XUUU4PQxAEoU6xcuXKHVrrlqGv1wnhP+qooygtLXV6GIIg\nCHUKpdR3Zq+Lq0cQBCHHEOEXBEHIMUT4BUEQcgwRfkEQhBxDhF8QBCHHEOEXBEHIMUT4BUEQcgwR\nfkEQhEykogLGjTP+TDIi/IIgCJnG++9Dly5w112wYEHSTy/CLwiCkCn8/DNcfz306gVeLyxeDAMG\nJP0yIvyCIAiZwPz50KkTTJoEt90GX3wBvXun5FIi/IIgCE6yYwcMGgR9+0LTpvDRR/Doo9CgQcou\nKcIvCILgBFrDa6/BL38JM2bA6NGwahV0757yS9eJ6pyCIAhZxZYtcMMNMGcOnHoqPP88nHhi2i4v\nFr8gCEK60BomT4biYli40HDpfPxxWkUfxOIXBEFID//7HwweDEuXwtlnGxPAscc6MhSx+AVBEFKJ\nxwMTJhhW/cqVRtbO4sWOiT6IxS8IgpA61q6Fq6+GTz+Ffv3gmWegTRunR5U6i18pNVUp9aNSam3A\na+OVUl8qpdYopd5USjVL1fUFQRAco6oKxoyBk0+Gr7+GV1+F2bMzQvQhta6eF4E+Ia8tBDprrbsA\n/wXuSuH1BUEQ0s+nn8Ipp8Df/w4XXgjr18Of/wxKOT0yPykTfq31B8BPIa+9q7Wuqf3xE6Btqq4v\nCIKQVg4cgDvugNNPh127YO5cmD4dWrRwemRhOOnjvwr4l4PXFwRBSA5Ll8I11xhuneuug4cegiZN\nnB6VJY5k9Sil7gFqgOkRjhmilCpVSpVu3749fYMTBEGwy549MGSIUVPH5YL33jMCuBks+uCA8Cul\nrgT6ApdprbXVcVrrSVrrEq11ScuWLdM2PkEQBFvMnWtsxHr+eRg+HFavhrPOcnpUtkirq0cp1QcY\nAZyltT6QzmsLgiAkhe3b4aabjDo7J55oZOuUlDg9qphIZTrnq8DHwAlKqc1KqauBiUBjYKFSqkwp\n9Wyqri8IgpAsdu6rZPXGXeyd+pJRVG3WLLjvPigtrXOiDym0+LXWl5i8/HyqricIgpAsdu6rZPOu\nCto2r8+yDTv4x9TFjHnnKRp/9Sk/nXgyh70/zaidb/McRY0K0zRye8jOXUEQchIrYZ5dtoWRs9aQ\n73JRXVPNRaveYe6Sqbi1lzHnDOZf3fvzYYeOFEU4d9A5vF4eHtCF/t0yY/MWiPALgpCDWAnzzn2V\njJy1hoPVXlr9tIlx7zzJaZvWsqxDV+7qcyObmrWicV4em3dVWFrxgec4iBeAEbPW0KNji4yx/EX4\nBUHIKSIJ8+ZdFdRD85cVs7ht2XSq3PkMP+8mXj/xXP/O22qvl7bN61uef/OuCvJdLv+5AfJdroiT\nRboR4RcEIaeIJMwdtmzg5edv4cRtX/Hucafxt3Ov56emRRS6XBS4D60OIgl42+b1qfZ6g16LNlmk\nGxF+QRByCjNhpqqS4556mAaPjqd+k2bc/Ke7WNKpJ9VaM2FAF/9qwE6gtqhRIQ8P6MKIEFdSplj7\nACrCHqqMoaSkRJeWljo9DEEQsoQ5ZVv8wtxp4zomv/8sjb/5Cv7yF5gwgZ2FjRLOyMmErB6l1Eqt\ndVi+qVj8giDkHP27taHHkfXx3n0PLV56DtW2LSxYAOedB0ARJCzWRY0KM8rKD0SEXxCE3GPRIooG\nD4Zvv4WhQ+H//g8aN3Z6VGlDWi8KgpA77N5tdMQ691zIz4cPPoCJE3NK9EGEXxCEXOGtt4yiai+9\nBHfeaRRV+/WvnR6VI4irRxCE7OaHH+DGG+H116FbN5g3z2iJmMOIxS8IQnaiNUybZhRVmz0bHnjA\naIuY46IPYvELgpCNbNwI114L77wDZ5xh1Mz/xS+cHlXGIBa/IAjZg9cLTz1lVM788EN44gnjzxSL\n/s59lazetJud+ypTep1kIRa/IOQombDBKKn85z9G39tly4ysnUmT4KijUn7ZeCpxOv3sRfgFIQfJ\n9LLBMVFTA488An//O9SvDy+8AFdc4S+qlkriqcSZCc9eXD2CkGMEitXeyhoOVnsZMWtNRrkpbLtO\nysqge3e46y7o2xfWr4crr0yL6MOhgm+B+Aq+mZEpz16EXxByjFjFKt3MLttCj4eWMGjKCno8tIQ5\nZVvCDzp4EO65x2h7uGULzJxp/NeqVVrHGmslTrNn71KKdVv3pGyMZojwC0KOkc6ywbEGPW1ZxMuX\nG/n4Dz4Il18O5eUwYEDSxx5tnKs37Qbg4QFdqJfvonFhHvXyXRErcZo9+wNVHgZPKzWf4FKE+PgF\nIcdIV9ngeHzZEZuYUA13322UWGjfHv79b/jtb5M6ZjuY3dfykb1tBWt9z374zDVU1hy6x8oandYu\nXSL8gpCD9O/WJqYa87ESb/tBq9XI0auWwc3DjPz8YcMMa79Ro6SO2Q5W97V8ZG+6tmtm6xz9u7Wh\nWYMCrnt5JQeqPf7X09mlS1w9gpCjFDUqpGu7ZikRmnjjCD6L2Oc6OaJmP++ueZEmF/SDevUO5eY7\nIPqQvPhIp9ZN8BLcCyWdXbpE+AVBSDqJxBH6d2vD8pG9mdv6Bz5++Sbaz59lBHLLyqBHj1QN2RbJ\nio+ETnDRYgPJRlw9giAknYTiCNu2UTRsGEVvvAEnnQT/fscI5mYAyYyPpNrdFglpvSgIQsqIaYeq\n1kbJ5FtvhYoKGDMGbr8d8tJnnwaOF7Acu9M7b+2S9taLSqmpQF/gR61159rXDgP+BRwFfAtcpLXe\nlaoxCILgLLbbD377LQwZAgsXwplnwpQpcMIJtq6RLBEOzNY5WONBa039/DzTjKRMbqtoh1T6+F8E\n+oS8diewWGt9HLC49mdBELKUqHn8Xi88+SR07gwff2wUWHv/fduib2uzl81xBu4fqPZoarxk7M7m\nREmZxa+1/kApdVTIy38AetX+/SXgPWBkqsYgCIJzRM3jX7/eKKr20UfQpw8895yRn2+TeFNGzTDb\nPxBIKlMtfSuWhgVu9ld50uI+Sndw9wit9bbav38PHJHm6wtCnaKu+JJDiSjKhS54+GG47z4jLXPa\nNBg0KOb6OhE3e8X4rMyydQJJVqpl6PvpmxwBDlZ7KXQrlEulvHCbY1k9WmutlLKMLCulhgBDANrH\nYAUIQraQCVUc7RIqaFaivPODTyi6+2aj3+1FFxk5+UfEZ/8ls/REaLaOmY8/0Yk39P0c1beYsfPK\nOVgdsIPXo8GT+l286Rb+H5RSR2qttymljgR+tDpQaz0JmARGVk+6BigImUAy3RipxmyC6tGxRZAo\nF1ZXcuOHL3HcA29Ay5bw5ptwwQUJXTfZpSdC0yshOKsnkdWX2fs5Zm45+S7zVU6qd/GmW/jnAFcA\n42r/nJ3m6wtCnSCZboxUEqmEgU+Uu28q5+9z/8HRP22Bq6+G8eOhefOkXD/ZufCh2Tq+vye6+jJ9\nP92K6hpz91JljYeGBe447yI6KcvqUUq9CnwMnKCU2qyUuhpD8M9VSn0F/Kb2Z0EQQkhnBc1EiFTC\noP+xTSj7YTYvvXQH7RvnGamaU6aYin4irQtTWXoCklND3+z99Hg1o/t1ol6+i3r5xjN01y4AXC5F\n34nLUlaxM5VZPZdY/NM5qbqmIGQL6aqgaYVdt4ZlUbXPPoBbhlFv82a45Rbc998PDRuaniPTYxnJ\nWn0N7dWRiUs3UOAOvs8+nVuxeVcF1TUeLn3+Uzw1Xr/fP1XuPSnZIAgZilNb+mMR4tAJquG+3by+\n9nWa3D8LiouNVM3TTrO8Vl2IZSS6+gp8nqAZ0vMYLu3e3n9/PvfS6k27KXS7qKpJvXtPirQJQgaT\nDjdGoIslHrdG/25tWD7ibOYesZWPpt1Iu3/PhlGjYNWqiKIPyal2mYibyA6JFFQLfZ6VNZqn3ttg\nemw63Xti8QtClmPltjGz7DsUNYzdrbF1K0VDh1L01ltwyimweBF06WJrbMm0pgNXJ8ne/xDv6isW\nN1E63Xsi/IKQxUQSRjMXy7xhZ9oXYq1h6lSjkFplpbEp69ZbYyqqlojYWd3D3oM1jJ1fnvSYQTz1\neWKd2NLl3hPhF4QsJZL/3MoS3V/lsSfEX39tFFVbvBh69jSydY47Lq5xJtOadrsUY+auo8qj0xYz\niLS6iGdiS0cBOBF+QchAkuGqiORmiGSJdm3XzFqIPR6jqNo994DbDc8+C4MHgyuxcKFP7Hz+ejv3\nbXYPVTVeCtwuqjzpaWloJxDuZN19K0T4BSEEp+vjJCu9MZK4R7NETa3OdeuMDVgrVsD55xui37Zt\n1HGYPU+z1+zcd+jvPTygC7fNKCNwH1RljSfod1IVII0lIyn0eTr9GRPhF4QAnM4pT2Z6YyRx37mv\nkg5FDZk37MygipCmglRVBQ89BGPHQpMmMH06XHKJraJqZs9Tg2mJh2j3bVUawu1yUVM7wVV7NPlu\nRWEeFLjdKQ2Qxpvf7/RnDET4BcFPJuSU2xETK2vR7HUzN4OZ8HRt18xckKq3Glb+F1/An/9sFFVr\n2dLWvZg9z+Ez1wCayppgH/yky0si3rfVezPp8lMocLuoDDD56+W5eeqyk2havyClFnXb5vU5GLK6\nOFjjibi6yITPGIjwC4KfTKiPEy0LxMpajGRFBroZrISn+MgmQa/Xqz7IjzfcjF7xJqpVK5g9G/r3\nj+lerIKvaAUE++BBh/vrPYdE1Oq9AWX6vDq1bpqW9yy0dW20VraZ8BkD2cAlCH4yoT5OpM1CVpur\nNvyw1/amK6sNU2WbdvtfP23jGt5+4Uau+XgWP118OZSXxyz6YF2fxqPNhfrhAV3ICxiaV8PyDTss\nz2X8XpO4N1fFQ+Bmsc27KqifH2w718/PC9p8Frq5LBM+YyAWv1DHSWaQzOn6OD6sskCsrEWfaNux\nIq2Ep1u7ZhTs38sDi5/nsrJ3+K5ZK6647EEmPHsbxFGC2Dd2s+cJmD5jM399oBvk4QFdGD5zDW6X\nwuPV/t9LV9ZM6KrqtnOPjxhItlqFZcJnTIRfyFiiiXoqgmSZknpnllUTSbSjWZGBz/KikrZM+3ij\n/98uKmnLjhlvMn/SbbTct4tJp/6RJ3sN4oFLu8d8/2bvyfKRvcOep9XEFuqvD5zADCeKrnUVBbtU\nUp37buYie3DBlxTmGW6qwM5ZkWISPTq2yIjPmAi/kJFEE/VUBsnSsYEmHsxWJKPOL2Z/lYdR5xcz\ndn45bpei2qMZ1bc4KBtmxMzVuJVhTXsD/NCHHdjDqffcxGnr3uPLFh249oK7Wd36BArzFD06tohp\nfJFq83dt1yzsXuxObG2b1/efu7JG44sPRHq/E10J2ukoBvgnKa0U84edSccjGgPW8Q3fJOb0Z0yE\nX4ibVOUi2xH1TAmS2SVZzyrQWly7ZU9QaYL+XVvz1udbyHMpxsxZBxr6dG7F7f489wC3hNb0W/8B\nf1/0HI0rDzCx5yAe/9UAqt35gJEKGeuzTPQ9ieRqWx2DOyvRlaCdjmKhFLqNXc8+zCax/ZUe1m7Z\nEzYJOoEIvxAXqcxFtiMgmRIks0Oyn5XvGVw86eOgyXFG6WYAqjyGRX/PW2v56sefCW3ydMTeHdz/\n7tOcu+FTyo48nhHn3cR3Rx4T1A0qnmeZjPfEN7Gt27oHUHRq3SSmcye6ErTTUcytVJDIB44lcIIf\n1beYe95cG3Tc2Pnl9OncynHjRLJ6hJhJRkeiSNj5kidSKjedpOpZmWXnmPHKJ5v8f1fayyVl77Bw\nyg2c+e1qxp59NX8aNJ6NrY9h2NkdE36WRY0KGXV+MQVuRcMCd9znWbZhB0NeXsnQ6avo8dAS5pRt\nCXq/Gxa4KXArRp1fHHZuq3LOdss8R+wo1q0Ny0f25p+DT+OBP3YOe17LNuygx0NLGDRlBT0eWsJP\n+6rC2ifGWnI6VYjFL8RMqt0sdrNrMiFIFo1UPSuzydGMgjwXusZD251bGffOk5y+8Qs+at+FO/vc\nyMbmR/qPu7R7ey7t3t6ytELDAnfQDl8zZpdtYez8cgryXFR5NKP7Fce8sokWFN17sIYx84xrjJ1f\nTuN6ef5r7NxXyaafDvi7V/k4WO2lYYHblrstmtHh8813bdeMPp1aBTVm7/HQkqBxT1y6gdAgdKas\nSkX4hZhJh5vFrqg7HSSLRqqeldnk2L9ra7+7x4+nhhn7PqF46iPUuN2M7HMjb5z0O6q9hGWi+M7r\nw+ei0l5NpUf7+8Ja1dDxCbaPsfPK6dMpNrdGpIkSDFdJVY2Xqhrj33yTwrINOxg5aw0ukzIShW7F\ngrXf8/R7G6K622JJ6Q387JnFIArcLob0PIanQq6bCZ9XEX4hZtKV756oqDtdCAtS+6zMJseu7Zox\nZm45+W7FMd9/w7Tlz9F83Wr2//Y8fn/CJWxqcBg+bfJlojRvWBBWEdNMyCP1gU3WyibSRGl1jXVb\nfw4baxBK8dTSr8LKRFj5/eNZSVqN22ol5TQi/EJcOOVmsSvmmVAIy0cqn1Xo5HhZ9w70Oe4wqsc+\nwBEvTEA1awavvcaG03/LrudXQOWhoGSh22VpCVulL4K5oLdtXp+K6pqg4yqqa2Je2USbKM3EFbTp\nWBvku/GiGdqrI5M++JrKmkPjizYpxWp0RBt3pgi+DxF+IW7S7WaxK+apLoQVz0oibc9qxQqKrr7a\nKKF82WXw2GPQogVrP/mOfZXBmShVHq+lJRwphmDlqlIqeGOVslG90wyridJKXDu1bho21sI8F89e\nfoo/Kyi0z20qfO11IebkQ4RfqBPEIuapDD5nykpi577KoJTHIlVjNDh/7DFo0wbmzTNq5tceO3Z+\nedg5rupxFK98stHUEu7arhmjzi/mnrfWhv3eX884Kuy1zbsqqJfnptpz6Fz18mLfC+DDaqK0Elez\nCaHn8YeqiKarTEKmx5x8iPALdYJYxDxVAdV4VhKpiDPMLtvCHa+vpro2X//Mjat57sNJNNz8HVx/\nPYwbZ9TNr8Xs2TUscHP6sS144aNvg84d+Jw6t2lKo0J32ErhpY++Y+rybxl2dkcu7d6eokaFMeXZ\nJ/o8zMQ1cELwZSDt3FfpPy6aNZ4J8aB0IsIv1AliEfNUBVRjrZXvyzRJxuogMK1yxMw1VHs0TQ7u\n466lU7lkzbt827w1NW+/S9M+54b9rmmVTK39lS2tnlPb5vWp8YaXGT5QbUwEjy78LxOXfsX4gV1t\nFR9L9WqpqFFhxGduZY1nyiounaho9aNTclGlbgWuwXAIfgH8VWt90Or4kpISXVpamq7h5Rx2W+M5\nzZyyLWHCEukLmux72Lmv0p+r7aNevovlI3tT1Ci4wUmVx4NX47fKQ4+NZWyB5630eNFac9aXn3D/\nu0/Rcv9uJv/qjzzX63JeHHqWZTmASM8u0lh8v+dSigMhu1Vjua9ozy4ZxHONdIzLSZRSK7XWJaGv\np93iV0q1AW4CirXWFUqpGcCfgRfTPRbBfmu8TLCAYg2eBVp4ySjatW7rHv56xlFMXf5NWFs/MzdQ\nKL7VQSwrgdDzFu3fzd8XPUe/Lz9kfcujGPynUXxx5HEU5qmIrqxIzy6SXzqwhMLgaaW1RdLM78t3\nHrNzpaO2UjzXqGs1n5KFU66ePKC+UqoaaABsdWgcOY15a7zVgKKyxtnWcFbEEzxLRtGuQJ+6W8Gw\ns4/x+7fBXEBCqfYaO0hjiRP4z6s9/KH8PUYvnkyjqgNM6DmIZ2qLquW5YPzArjFNhLFQ1KiQnscf\nzviBXRk+c01Q2WTffUWLn6Rj018818iEmk9OrK7TXqtHa70FeATYCGwD9mit3033OATzuiRu5TLa\n4wWQKfVF4iHRWjk791X6feo+PBomLv0q6Li2zetT5TF3hQTWrdlf5bGsBWNG2+b1Kdr1A1NnjuHx\neY/ybfMj+eM1E+k/42meH3wG0676FSvu/o3tiSy0I1Qs9O/Who/u7M3t5x5PYZ6yVdfHdz0g5bWV\nAuv52L1GPL+TTGaXbQmq7zOnbEtaruuEq6c58AfgaGA38LpSapDW+pWQ44YAQwDat2+f7mHmBOZB\nP29to4tDZEJ9kXitokSW8jv3VbL0yx9xmaSjK6WCzlHUqJBhZx/Howv/G3Rcw0I3Y/p14uxfHO53\nCdlumtK0kKLpL7Jw6giqq6oZ97vrmHbK+Yy78CQ6HtHYX/vdLvGufEKf/Y3nHGdrN6rdpizJJJ5c\neic3IzrVeN0JV89vgG+01tsBlFJvAGcAQcKvtZ4ETAIjuJusi2di0NIprLJfwLw1nlMk4qqJ1tzD\n6rPgu6ZbKSpMSgEcrPaG1Va/tHt7Ji7dEOQK8Xi1X/QhesaR77rH7trG3+f+g6KNazl4Zi92PvoE\n5x3ZjsEJxCjiERmrZx/NbRRLU5ZI54jnuxqPS8uJ/PtoRkkqtcoJ4d8InKaUagBUAOcAaUnZyba0\nrWR8MMysnZ37Kpl0eQmg6dS6qaOinwyraGivjkxcuoEC96H3PVKA1axOjRmhtdWLGhUyfqD5RBpY\nC8fKwty5r5K7X/+cKz6axa3L/kmVO5/h593EglP64Jm7mYcHHBZ3E494Vj6JPPtEg6bZ9l01I5JR\nkur7T7vwa61XKKVmAquAGuBzai37VOLksioVJPODEWjtZMoXzjep7amoRofkkmuvtiUggfcCmiE9\njYAshJfQDfwsmIlW/XwX3toqlT7MhCx0I9GCtd8zfObioCwgK4t5x/JPmfHCbXTa9hX/Pu40Rp17\nPT82LoIIxdHsEk8QMxHxNrtelccT8XqBexWy6btqRaQVd6rv35GsHq31aGB0Oq+ZTWlbqZrEMmVy\nDMpbr/H4O0r5qPTosAYXoWz4YS/DX19NledQHZqn3tvg901H+iyYiZZXAyG+/kgbyJZt2MGIgAwY\nX1mEEbPWUHxkk+Da9pWVcP/9HD9uHDsLG3HDH+5kwQk9QJkH2e3EJuzWuYl0rkQyXnzXu83f9tF4\nhss37DA1JEL3KqiQ/UV19bsaDbPVXyxtJuMlZ3buZkLaVrJI1SSW7PPG44qykw9fL98V1voukNll\nWxg+c03YhOG7FzvNNsxEcu/BGsbMXUe+24VHa0vhPNQYPHz82qv5/ZPLKKx1O03uWM2vH7oT1q9n\nU9+B/OnYP7GjXpOw3wsdY6R7t1qxxbMPIpEd0D06tsDtMhq8g7GZzcyQsPOe19Xvqh1CV3/p0Kqc\nEf5UbeN3AvNltJc9FdVB9UmScd54P3Dxuozs5MP7xmqGT0SqTETXdy+Rltg+X3yoSC7bsONQd6ka\nL1efeTQ9OraI+R4MV5Em78B+RnzwMj1WzsXTri3735jDb1flBcUV3Ary3K6g2EQ8AdVAoY01iJlI\nxsvmXRUUuF1BE6CZIWH2vOrVutYK89x1+rsaD+nQqpwRfqhbZVMjEfrBOFjjweP1MnT6qoT88sn6\nwCXiMjKbfPJc4HbZE0Ar0S1wB3eaMhP2Hg8tMc1eMQv2PvP+10xd/o2/Tk3oPVjl9BfmKU79ahX/\n9++JtNvzA6+e2o/OLz2Ft1Fj8stWBI27QUEe//enEzlY7aFbu2ZR0zdTtRKMN+PFriFhVQJ6wU2/\njtruMZlkUsZfqrUqp4Qf6k7Z1GiEbaX3wN7KQ37keP3ysX7gzL4siQiQ1eRjd0xmIlLgVky4qBun\nH1sUdq1QYbcb7AWorDF3XVjl9LfyHOD2dyZz4eqF/O+wNlx46Ti+OKYLy9sdDoQ3GamoruH211cH\nTXiRJvSGBW4qPZnjzrRrSFgdF+s+hUTIlKSGQFKpVTkn/NlEUaNCmtYvoMDtjqm7kJ3zJpJyZ8fS\ni2RdRWrEYWfs4ashQ6A9Xs34geFfaKtds5GCvT6snnVoTv/v/vsRYxc+Q4uKn5l0xoU81+ty9rvy\ngoQwcNy+Im+VNV7/OSJN6L73whcUDeyP66ShY9eQcHI1nilJDelEhD+DsbP0jCayqVq+Rvuy2Nmk\nFMm6isfa8d1rj44tWD6yN+u27uGqFz/Do/FXlrz99dVhX+iGBe6wnP2D1V5/5pDvfmKtUzPs7I68\nNvdTRr/7LL9dv4w9J3TC9c9FDDi+E78IaKLiI1D89lRUMXT650GNTawmGTNXlNerWXDTr9NqNVth\nZ7OX7zMa7z6FRMimjD+7iPBnKHaXnpFENpXLV7MviwLmrt5Cv65tIm5SsmNdxTphmd1rswb5hMZ4\nqz2adVv30PP4w/2v7a/yUOhWQTn6hW4VlDnku59/rtjIxKVfhVXnDBvLzNX8ae1S5v/7WRp5qtg/\n+j6a3nMn5OezLML7Euh+shtoN3svCvPcETOfMoVMcLFkU8afXUT4M5BYl55Wu28TWb5GE16zL0tF\ntZe/z13PAwu+5NELu/qDo4HYsa5iFQOre31kYFeL3wjOj2/bvD7KpYzqa74jXOFljosaRa9Ts3Nf\nJY8/v5Dn5j/JWd+sorTNLxnV7xZeueMKGubn235fYgm011XhyhQXSzZl/NlFhD8DiWfpGbqcjuUc\noSJv1xVj6f7waIbPNP8C23FNRRKDWILJTernkeciyOrPcxHkXgm8l0hf/NDrmr4PXi8Vjz3B3Emj\nQWvu/c21vHzy+TSqV+B/7rG8L3b93nVVuDLJxZItGX92EeHPQJJhwdk9R6jIjzq/mLHzy21ZYf27\ntaFZgwIGv1Qalk3idinTL3A0kYokBlb1dazutVPrpky4qBvDZ67GrVx4tNeybn2kL76tFch//gPX\nXEPbZctYdszJ3PnboWxuekTQc9+5r5I9FdVUxZB5YzfWUReFK9NWKtmS8WcHS+FXSi0AbtBaf5u+\n4QiQHAvOrhUbal2PmbuOgkOv/dwAAB/ZSURBVDzzevFm1+/Uugmo8OKpHq+2/AJHEikrMTB6za6m\nskbHFEyORRDNvvi+evyBjWmGz1xDswYFdGrdhKJCFzzyCIwZAw0awIsv8lOXc9jxxhc0DhhL4KTl\n8XrJdyvqJXlzUl0Trrq6UskGIln8LwDvKqVeAh7WWlenaUwC0S04O8HPaOcwta7drrBSB9FSMccP\n7BpUkyXfrRg/MHoDDLN/DxQDt0tR7dGM6lvMgrXfh7X9C5yQ4m0taHY/gUxfsTHMlVVZ4+W6l1dy\nwvcbeGHZczT7ci0MHAhPPgmtWtEf6HFcS/85IbwoXGEePHXZSY5XP42FVGSI1cWVSjZgKfxa69eV\nUm8Do4BSpdTLcEghtNYT0jC+nMZKsGIJfkYSPfNGLJrR/YoZO688plRMYzPZzySjlHP/bm2C6uLc\nN3cdXpOODKHVHgPdRYE/RyLSs9y5r5KnQjptARTWVDH0/Ve5dsUsdjVoyt5XXqPxZRcHHRP43M2K\nbhW43TStX1BnhC6V2Td1baWSDUTz8VcB+4FCoDGEbF0U0oqv4beZyyOs4qMNrJba/bu1oU+nVjGn\nYvY8vqXpmOMp1DZ2fjlVHm1Z+gBg2NnHxe6LD7lOpPtZt3UPbpcLODSGUzaX8/DbT3DsT5uZceJv\neLzPtTzd8zdY5Q9B5vmyYyVTsm+E5BHJx98HmADMAU7WWh9I26iEMHyi5lIqzOUB8PsnPgwqaBUo\neHZ2yQZa62BuhcWahZHKQm2FeS5/bX3fPcYqTtECyb4JFqBh5QGGfzCNv6yaz9YmLbn8ovv48OiT\nqZfviirgdd2XHek5+f5d3DR1i0gW/z3AhVrrdekajGBOtI5QvterPOG1euyIb6RuVIHEYrmmqlCb\n26X8pRdC01fNiJQaGCmQbJRVNkS/59crefDfE2n98w5W9L2EocUDqK7XkHoxCHgqfNnpKipm9ZzW\nbtnDxZM+zqj6NoI9XFb/oLX+tYh+ZuCzuEJpkO+mIM9Fodu8YUeg+O6trOFgtZcRs9awc1+l/9gN\nP+xl+MzIx/jwWa718l00LsyjXr7LUvjMxhxoJUbC7DqGda9BQ+3/gohWdsHudR4e0IX9VR7yXS6a\nVuzl0fkTmPb6aCrz67Hmn3M4fe50Fo46n1eu6c7ykb1jErqiRoV0bdcsKSI9u2wLPR5awqApK+jx\n0BLmlG1J+JxWmD2nwLTfaJ8bIfOQPP46gJnFVZjn4tnLT6F103r0nbgsaNepzwqP5pqZXbbF36Uq\nkEjuG7uWa6J+7dAWhn0nLqu1wA1/e+jqwU7ZhWjXCdz13HvdB/zt7adpdnAvT55+MZPPuoSl/c4F\nnA9GOuFzD31OmbT5SogdS4tfyBwCLa6GhYaVf2+/Ynoe35KORzTmolPaBh1/UUlbihqZV5UM3Ew0\nclZ4l6rAYyKNJ5rl6htzYZ6iQb6bwjwVs1/bdx2fBR5I6OrBX3YhALOyC6GEuUu2baPoikt5fNaD\n/NikBZdc8wRPnXMF919cEtPYd+6rZPWm3SmxgBNZTSVC4Pte1wPWuU7WW/zJ9IPaPZeRfZOc1EYf\noSmOY+eV07gwjx4dWzBj5eagY2eUbubmc46PGFQ0SzEEKMizdt/EijGlKKM0jlaWx8VTFyhUZA6V\nkDi0SzfafQTFPzweXs3/kpMeGwsVFTBuHK2uHcaovdUxf3ZSXXgsE0S3rgesc52sFn6rL2A8k4Hd\nL/Pssi3cHrKZ6dELuyYc2DNLcRwxaw2TLj8l4pLbyjVj1bBkwY1nJlzK1zfxjQip42PmjoilLlA0\nkQmdaPZW1vhbKZptgPO5S1rs2caD70zkpG8/p/qMHuS/MBWOP54igLzKmPYFpMMNkymiK5uv6i5Z\nK/xWX8C9B2sYO788JmvM6lyhufPG9v7VQUXBqj2a219fjUsRVMo3VgvQyqcKypY1HPqltBKPREXf\nn3aKCtvxGuoDjkUk7exkDm1wfs+ba2lY4PY3Rg985pt3VVCI5s+lcxj+wTS0Utx/3lD6PXMfXTsc\nFnQvsXxW0uX7zhTRdTreIcRH1gq/2RfQrRRj5pVTVRObNWZ2Lu3V/P7JZRQGtMXrUNQQtwre8AOG\n+AP+LlnxWIDWhciaxFxZ0keyxSNa2mnohBSrSEYSGavcf19wN/SZd/jhO1588Q5O2ryepcecwj2/\nG8qO5kfw53r5YfcSy2clnW4YEV0hXrJW+E2/gB4vBXkuqg41NbJljZmdy8ge0VQFtMWbN+xMPDr6\n5uZ4LMBIy/tEKksmUzysxLdBgRtvrdUdeK1kimSk9ogQ8MwLXfDwwzS77z461W/A8D/cwZziXlR6\noZ5L0XfiMv8kHo/lniluGEGIRNZm9ZjlHo/u14kab+QCZHbOVeBW/p6mPvJdLvZXeRg/sCt5UZ5q\nvOLWv1sblo/sbZpDbpZp43M92cm1TkYWinnaqeLZQSeb5rzHsi8gGqGZT6FUe710+HY9lJTA3/4G\nF1xAwX//w7XP3YuuzZA5WO31P6OGBe64J6VI75MgZAKOWPxKqWbAFKAzRkzuKq31x8m+jpkl3Lhe\nXlzWmFleeSCVHmOzkO+4j/+3k1tnlPndPD7spjVauWdisdCNypLh6ZqhVuv0T75jzLxyCtyKGm+4\nP9wuVtZuYJvDUJLpbgo819ote/yxHFdlBTM3L6TZ2c/B4YfDm2/CBRcAsH/TbgrdLv/KDQ5N4olY\n7uKGETIZpbVJ2cNUX9Qo9fyh1nqKUqoAaKC13m11fElJiS4tLU3a9WPJ6rE6dk7ZFkbMWgMYlmKh\nW6Fcyi+aqzftZtCUFeytPORXalDg5tlBJ0cUQkhOOuDOfZWcMW5JWIAVYNGtPf1B3OmffMc9b60N\n+vd6+S6Wj+xt+WyiPb9kpdAmep6d+yrZ9c4ijr7zFtz/2wBXX23Uzm/WLOgYX8lkH4H3n66yCIKQ\nCpRSK7XWJaGvp93iV0o1BXoCVwJoraswqoBmHJEEuH+3NhQf2YTfP/EhUOvz92h/ANDM7eHVh4qg\nWZGsdMDNuypwu8Jz5/NdhwKeO/dVMmZueFUOq+5ZYD9FNlGRTHjy+/lniu68k6JnnoGjj4ZFi+Cc\nc8IOi+aTj/deZMIQMhknXD1HA9uBF5RSXYGVwM1a6/3puLhPUPJciiqPUXv+su4dwo6zI8D7qzwU\n5rn9xdHgUACwa7tmtlwFoQKRSK/cQNo2r4/HpIi9K2A36+ZdFbWNV8KzkGIpvGaWIpuI+ybhyW/B\nArjuOti8GW69FcaOhYYNLQ9PdnZTqjdwCUKiOCH8ecDJwI1a6xVKqceBOzEavvhRSg0BhgC0b98+\n7CTxYJZueM+ba0HDZacFi78dAY6WlRJNUMwEokfHFnH1yjXL1hk/sAu3v77aH2fIcxHUc7Zt8/p4\nTFx9o/sVm4qfaYqsSzFm7jqqPIf6A9w2owy3y0WBOz7hizsXfscOQ+hfeQWKi+Gjj+C002xdM1k+\nealdL9QFnMjq2Qxs1lqvqP15JsZEEITWepLWukRrXdKyZXiDj7guvKuCPBP3x5i568KyWWIpExAp\nK8Wqro1V5Uwg6jntVN0EY+L55K5zmHbVqUy76lesuPs3YZODPxOmwE2BW/HABZ3DVkC+jB/TTBeP\nJt8d/DGq8RrtCX1ju2PmGjb8sDfsuVsRc5qn1jBjhiH2r70G994Lq1bZFv1k4lQdHUGIhbRb/Frr\n75VSm5RSJ2it/wOcA5Sn4lqhrpC2zeubFiXLd4dbk3bzseN1E0SyauPqlWthERc1KvQHk30CHnjO\nWFclF5W0ZUbpZv/Po/oabRojUVXj5fdPfMgjF3a1ZfnHlAu/dSvccAPMnm2kai5aBF26RL1GqsiE\nOjrpQuIYdRenNnDdCEyvzej5Gvhrsi9g5QoZ3a/YcO8E4NHmPm0rUTQLZMb6wY8mEJHOafa7of1n\nQ4nkGgq8VuC9AWFuixmlm5k37MygUhWNCw+lyFZ5PHg1YWmsVQGB71jTZ02FRWt4/nm44w6orITx\n4+GWWyDP2T2JubKBS+IYdRtHviVa6zIgLMUoWUTys17WvQNo/FUuPSY7SgMJFeBkFX5LRCB8v3tb\nQDE4r4blG3aYfvns+p1D721or45hKwsXii+/30u7wxr4XwsV6eUbdnDH62uo8kSu1WPnPs1cZD+W\nrafj324l//334KyzYMoU6NjR1jnTQabU0UkVEseo+2RlyYZorpDLTutAn87hzcSjYfWB/37PQR55\n9z9BE4kd6ycRgejRsQVul4uaWsu/OoJFbcc1ZHZvE5duILTb1YFqD8Ne/dy/c9l3r4EirQP+H0ii\nLo/ZKzdSftf93LJ0GpUuF+X3jKPrfcPBpDuZ02TzBi5pwlL3ybxvTBKwG5gNDLraKVlgFrjzejUP\nvv0lVR7N/ipPzC3orIK/0di8q4ICt70gop3nYXZvBW4Xw84+jsK88IB4YHmDwHu1avASTyOWQHZ/\n9jkd/vBb7lo4mY86dOE3Vz/DxaoLOw9Ux3U+IX5yKY6RrWSl8MdaAya0f+n0Fd+ZTgLmvvVwy9at\nVMqzOGL58tl5Hlbnu7R7eyb/pYQGEXrXBt6r2QTSoMDN5L+UxOcDrqqC++6jSY/utN/1PTf1G87V\nA+7l+yYtJFvGIZJZY0lwhqx09UC4GwUwbcph5uKwquMe6pevrPGgVHjd+WpP6q2fWGME0dxKkc7X\nqXVTvBalPUIbmhuZU7HvWDbls8/gqqtg7VqqL7yI89v+kW0Fh/oFiJXpHNkex8h2slb44ZCfNVIG\nQqx13Ht0bMGky08B1KFG5yGM7tcpLV+EWL980fzOVufzTQp3zFwTVMwMwhuaL9uwA0/AyiHfHYeL\n58ABIxf/H/+AI4+EOXMo7NePu2rrI2VztkxdIpvjGNlOVgs/RM9AsF3H3WIC8VnJbpeiOkIJiHjG\nbUfQk/3lszpfYG2iQPdWYENz37MOnBtcypgsbfPee3DNNfC//8GQIfDww9C0qX8MYmUKQuJkvfBH\ny0AIdHG4FByoMvebW00gy0f2ZvnI3kkVI6tSDk4LXscjGvPIhV0trW6zZ13gdtvL9tizB0aMgEmT\n4NhjYckSOPvssMPEyhSExMl64bcTBO3frQ17D9YwZl45hXkuKmuCyywXNSpk9abdlhNILFk5RiPy\nPYCiU+smEUs5+K6VjJ69ySKS1R13tse8eUZRtW3bjA1ZY8ZAgwaRfycA2UEqCLGR9cJvJwi6c18l\nY+eXB/mvtVLMH3amv259MlLYZpdt4Y6QomkTLuoW1gQ8dIKJ1rM33cJnZXXHvClt+3a4+WZ49VXo\n3BneeAN+9auYxiI7SAUhdrJe+CG6b9hMbAvdrqCgZaJb8Y02iGuCShnUeGH4zNVBIh4t5gDR4w5O\nCp8tP7zWRjG1m24yXDxjxsCdd0JBQUzXkh2kghAfOSH8QJAf2odPnOxa84kEF60ao7hV8I7H0Amm\nyuPF4/UGBUyjxR2cFr6IfvjNm+H66w33zq9+ZdTb6dw5ruvIDlJBiI+cEf5Ay7iiugalFPXyDvnM\nR/UtZszccvLdCo/Xun5PvMFFq8YoHh19glm+YYfpSiNS3CHjhM/rhcmTYfhwqKmBCRMMi99tvTEs\nGrKDVBDiIyeE38wyBk11becsX/A03+WiusbL6H6dku4uKWoUvTFK6PHRSifXGeHbsAEGDzZSNXv3\nNiaAY45J+LTJroQpQWIhV8gJ4bfapOXDHzzF8OmPnV9On86tkv7l79GxBc9fcSo/V1TTpH6+aVaP\nFWYrjYwvAVxTA489BqNGGf77yZONhucq3OUVL8nK7Y81ViKThFCXyQnhtxMwDSQV7hIzYUnG+TN2\nU9MXXxgi/9ln0L8/PP00tElN0DnR3P5YYyWZFlAXhFjJyiJtZgzt1ZHCPEXjwjzyXEYpgcaFeRTm\nucgLeQrJdpfYbZUY7RxW1UPjrfCZEiorYfRoOPlk+PZbI3vnrbdSJvrJIJZ2icl4LwXBabLe4g+0\nzkAxpOcxXNrdaN4eLXiaLBLNPqkzFuYnnxhWfnk5DBpk1NppEUO5BoeIJVYimURCNpDVwm/VXKRr\nu2Z0at2Eru2aAal3lyQShM3UlM0g9u83/PiPPWZY9vPnw+9/7/SobBNLrKTOBNQFIQJZLfxm1lll\njZfrXl6Jl/CSy6kS0kSCsBlvYS5ebGTsfPONkZ8/bhw0aeL0qGLG7uSf8QF1QbBBVgu/VVD3QLV5\nyeVUEu+qImMtzN27jZz8KVPguOPg/fehZ09nx5Qgdif/jA2oC4JNsjq4G9gpyKyDVCwdnOy0ZrQz\nnliDsBnZ7Wj2bCguhqlTjYqaq1fXedGPlYwKqAtCjGS1xQ+HrLN1W/cweFoplTWHds/atZydDq5m\njIX5ww/GbtsZM6BLF5gzB0pKnBmLIAhxk9UWv4+iRoX0PP5wxg/sGrPlnCnpe8m0MGNevWgNr7xi\nWPlvvQVjx0JpqYi+INRRst7iDyQeyznjg6sxEvPqZeNGo1b+22/D6acbPv3i4vQNWBCEpJMTFn8g\nsVrOGRtcjYOYVi9eLzzzDHTqZARuH38cPvxQRF8QsgDHhF8p5VZKfa6UmufUGOyQKcHVZASXbe9Q\n/e9/oVcvuOEGOO00WLs24UqagiBkDk66em4G1gMZn/TtdHA1WcHlqKsXX7nk0aOhXj0ja+fKK5Na\nVE0QBOdxxOJXSrUFzgemOHH9eAh0ESXD+rZLMoPLEVcvq1dD9+4wciScd55RduGvfxXRF4QsxCmL\n/zFgBNDYoevHTbpTO5MdXA5bveRp+Nvf4KGH4LDD4PXXYcAAEXxByGLSbvErpfoCP2qtV0Y5bohS\nqlQpVbp9+/Y0jS4yTqR2piK47F+9rFkJJ50EDzwAl11mWPkDB4roC0KW44SrpwfQXyn1LfAa0Fsp\n9UroQVrrSVrrEq11ScuWLdM9RlNiKd+bLFISXN63D26+Gc48Ew4cgHfegRdfhKKipI1bEITMJe2u\nHq31XcBdAEqpXsAdWutB6R5HPNixvlPRmSmpweV334UhQ+C772DYMHjwQWhc5zxugiAkQE5t4PIR\nrzhHq8yYSv9/wtVDd+2C224zLPsTTjBy8s88MyljEwShbqG01tGPcpiSkhJdWlqalHMlQ5zNJo6d\n+yrp8dASDlYfWhHUy3exfGRv53f4vvEGDB0K27cbRdXuvddI1xQEIatRSq3UWofVVsmpnbvJCs6a\n7f51wv8fle+/N4K1AwZAq1ZG/9sHHxTRF4QcJ6eEP5XinFGlHbSGl14yyivMm2eI/aefGhk8giDk\nPDkl/KkU50wp7cB33xkbsK680hD+sjK46y7Iz0/vOARByFhyKrib6rZ5jpZ28Hrh6afhzjuNn598\n0qi148qpuV0QBBvklPBD6sU5lb17LfnyS7jmGli+HH73O3juOejQIb1jEAShzpBzwg8OiXMqqK6G\n8eNhzBho2NBI1fzLX2TnrSAIEclJ4c8KPv8crrrK8OEPHGi4dlq1cnpUgiDUAcQBXNc4eNAI1p56\nqpGuOWuWUVhNRF8QBJuIxV+XWLYMrr7aaJTy17/Co49C8+ZOj0oQhDqGWPx1gb17jbo6v/41VFUZ\n9XamThXRFwQhLkT4M5133oHOnY1UzZtugi++gHPPdXpUgiDUYUT4M5WdO+GKK4zNWA0aGG6exx+H\nRo2cHpkgCHUcEf5MQ2uYOdPYdfvPfxrdsT7/HM44w+mRCYKQJUhwN5PYts2oovnmm3DKKYYvv2tX\np0clCEKWIRZ/JqC1EawtLoa33zb6337yiYi+IAgpQSx+p/nmG6Mj1qJFRtbOlClw/PFOj0oQhCxG\nLH6n8HiMYG3nzoZ1//TT8N57IvqCIKQcsfidoLzcKKr28cdG1s6zz0L79k6PShCEHEEs/nRSXQ33\n3280RPnvf+Hll2H+fBF9QRDSilj86aK01Ci3sGYNXHwxPPEEHH6406MSBCEHEYs/1VRUGA3Ou3c3\nmp2/9Ra89pqIviAIjiEWfyp5/33Dl79hg/Hn+PHQrJnToxIEIccRiz8V/PwzXH899OplZO8sWgST\nJ4voC4KQEYjwJ5sFC6BTJ5g0CW67zSiqds45To9KEATBjwh/stixAwYNgvPPhyZN4KOPjHr5DRs6\nPTJBEIQg0i78Sql2SqmlSqlypdQ6pdTN6R5DUtEa/vUvo9zCv/4Fo0fDqlVGMFcQBCEDcSK4WwPc\nrrVepZRqDKxUSi3UWpc7MJbE2LIFbrgB5syBkhJYvBhOPNHpUQmCIEQk7Ra/1nqb1npV7d/3AuuB\nNukeR0JobQRri4uNCpqPPGLswhXRFwShDuBoOqdS6ijgJGCFk+OIif/9DwYPhqVL4ayzjKJqHTs6\nPSpBEATbOBbcVUo1AmYBt2itfzb59yFKqVKlVOn27dvTP8BQPB6YMMGw6leuhOeegyVLRPQFQahz\nOCL8Sql8DNGfrrV+w+wYrfUkrXWJ1rqkZcuW6R1gKGvXGh2wbr/dSM1ct84opeySpChBEOoeTmT1\nKOB5YL3WekK6rx8TVVUwZgycfDJ8/bXRCnHOHGjb1umRCYIgxI0TPv4ewOXAF0qpstrX7tZaL3Bg\nLNZ8+qlRVG3tWrj0UnjsMXB65SEIgpAE0i78WutlgEr3dW1z4ADcey/84x9w5JGGhd+vn9OjEgRB\nSBpSpC2QpUuNYmpffw3XXmv0vm3a1OlRCYIgJBWJTgLs2WMIfe/eoJQxATz7rIi+IAhZiQj/3LnG\nRqwpU+COO4xGKb16OT0qQRCElJG7wr99O1xyCfTvD0VFRsPz8eOhQQOnRyYIgpBSck/4tTbSMn/5\nS5g1y0jXLC2FU091emSCIAhpIbeCu5s2GQ1S5s83qmc+/7xRO18QBCGHyA2L3+s1Six06mSUWZgw\nAZYvF9EXBCEnyX6L/6uvjKJq779vZO1MngzHHOP0qARBEBwjuy3+p56CLl2grMzI2lm0SERfEISc\nJ7stfpcLfvc7ePppaN3a6dEIgiBkBNkt/NddZ/ynMrdChCAIQrrJbuEXwRcEQQgju338giAIQhgi\n/IIgCDmGCL8gCEKOIcIvCIKQY4jwC4Ig5Bgi/IIgCDmGCL8gCEKOobTWTo8hKkqp7cB3cf56C2BH\nEodTF5B7zg3knnODRO65g9a6ZeiLdUL4E0EpVaq1LnF6HOlE7jk3kHvODVJxz+LqEQRByDFE+AVB\nEHKMXBD+SU4PwAHknnMDuefcIOn3nPU+fkEQBCGYXLD4BUEQhABE+AVBEHKMrBZ+pVQfpdR/lFIb\nlFJ3Oj2eVKOUaqeUWqqUKldKrVNK3ez0mNKBUsqtlPpcKTXP6bGkA6VUM6XUTKXUl0qp9Uqp050e\nU6pRSt1a+5leq5R6VSlVz+kxJRul1FSl1I9KqbUBrx2mlFqolPqq9s/mybhW1gq/UsoNPAWcBxQD\nlyilip0dVcqpAW7XWhcDpwFDc+CeAW4G1js9iDTyOPCO1voXQFey/N6VUm2Am4ASrXVnwA382dlR\npYQXgT4hr90JLNZaHwcsrv05YbJW+IFfARu01l9rrauA14A/ODymlKK13qa1XlX7970YgtDG2VGl\nFqVUW+B8YIrTY0kHSqmmQE/geQCtdZXWerezo0oLeUB9pVQe0ADY6vB4ko7W+gPgp5CX/wC8VPv3\nl4ALknGtbBb+NsCmgJ83k+UiGIhS6ijgJGCFsyNJOY8BIwCv0wNJE0cD24EXat1bU5RSDZ0eVCrR\nWm8BHgE2AtuAPVrrd50dVdo4Qmu9rfbv3wNHJOOk2Sz8OYtSqhEwC7hFa/2z0+NJFUqpvsCPWuuV\nTo8ljeQBJwPPaK1PAvaTpOV/plLr1/4DxqTXGmiolBrk7KjSjzZy75OSf5/Nwr8FaBfwc9va17Ia\npVQ+huhP11q/4fR4UkwPoL9S6lsMV15vpdQrzg4p5WwGNmutfSu5mRgTQTbzG+AbrfV2rXU18AZw\nhsNjShc/KKWOBKj988dknDSbhf8z4Dil1NFKqQKMYNAch8eUUpRSCsP3u15rPcHp8aQarfVdWuu2\nWuujMN7fJVrrrLYEtdbfA5uUUifUvnQOUO7gkNLBRuA0pVSD2s/4OWR5QDuAOcAVtX+/ApidjJPm\nJeMkmYjWukYpNQz4N0YWwFSt9TqHh5VqegCXA18opcpqX7tba73AwTEJyedGYHqtQfM18FeHx5NS\ntNYrlFIzgVUYmWufk4WlG5RSrwK9gBZKqc3AaGAcMEMpdTVGafqLknItKdkgCIKQW2Szq0cQBEEw\nQYRfEAQhxxDhFwRByDFE+AVBEHIMEX5BEIQcQ4RfEAQhxxDhF3KW2jLW3yilDqv9uXntz0fZ+N0X\nlVIDoxxzpVKqdXJGKwjJQ4RfyFm01puAZzA2yVD75ySt9bdJusSVGLVlBCGjEOEXcp1/YJQDuAU4\nE6MKZBjKYGJtY59FwOEB/3avUuqz2iYhk2qPHQiUYOywLVNK1Tc7Lh03KAihiPALOU1t0a/hGBPA\nLbU/m/FH4ASMpj5/IbhI2ESt9am1TULqA3211jOBUuAyrXU3rXWF2XGpuStBiIwIvyAYXdq2AZ0j\nHNMTeFVr7dFabwWWBPzb2UqpFUqpL4DeQCeLc9g9ThBSigi/kNMopboB52K0qrzVVwI3ht+vBzwN\nDNRanwhMBsL6wdo9ThDSgQi/kLPU+tifwXDxbATGY+HjBz4ALq5t7H4kcHbt6z7x3lHbACcw02cv\n0NjGcYKQVkT4hVxmMLBRa72w9uengV8qpc4yOfZN4CuM2vfTgI8BavvdTgbWYpQA/yzgd14Enq0t\nkV0Z4ThBSCtSllkQBCHHEItfEAQhx8jaDlyCEA9KqROBl0NertRad3diPIKQCsTVIwiCkGOIq0cQ\nBCHHEOEXBEHIMUT4BUEQcgwRfkEQhBzj/wEdsQOiJKhkkQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s4BPGrv9dpve",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Estimator API\n",
        "\n",
        "feat_cols = [tf.feature_column.numeric_column('x',shape=[1])]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "41x5bu4TfcfT",
        "colab_type": "code",
        "outputId": "2a00a7b0-feec-41e5-e46e-4786b9042a18",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 197
        }
      },
      "source": [
        "estimator = tf.estimator.LinearRegressor(feature_columns=feat_cols)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Using default config.\n",
            "WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmp0xywpl5k\n",
            "INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmp0xywpl5k', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
            "graph_options {\n",
            "  rewrite_options {\n",
            "    meta_optimizer_iterations: ONE\n",
            "  }\n",
            "}\n",
            ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_experimental_max_worker_delay_secs': None, '_session_creation_timeout_secs': 7200, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x7f8870613cc0>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4QmbwnwIR58M",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Train Test Split\n",
        "\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0QF5moj4TCft",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_train, x_eval, y_train, y_eval = train_test_split(x_data, y_true, test_size=0.3, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rHOoL198T8El",
        "colab_type": "code",
        "outputId": "596afa5d-a5d6-49b3-efb8-dc4300baebe8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "print(\"X-Train Shape : \",x_train.shape)\n",
        "print(\"X-Eval Shape : \",x_eval.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X-Train Shape :  (700000,)\n",
            "X-Eval Shape :  (300000,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fdGvUBVRT-ls",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "input_func = tf.estimator.inputs.numpy_input_fn({'x':x_train}, y_train, batch_size=4, num_epochs=None, shuffle=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YY1KCVscVlAF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_input_func = tf.estimator.inputs.numpy_input_fn({'x':x_train}, y_train, batch_size=4, num_epochs=1000, shuffle=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WTUXf_MkVz6q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "eval_input_func = tf.estimator.inputs.numpy_input_fn({'x':x_train}, y_train, batch_size=4, num_epochs=1000, shuffle=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "72SmFtyUV3uR",
        "colab_type": "code",
        "outputId": "64012220-33ca-4a77-8e9d-00ee716c3057",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 979
        }
      },
      "source": [
        "estimator.train(input_fn=input_func,steps=1000)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/training/training_util.py:236: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/inputs/queues/feeding_queue_runner.py:62: QueueRunner.__init__ (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "To construct input pipelines, use the `tf.data` module.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/inputs/queues/feeding_functions.py:500: add_queue_runner (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "To construct input pipelines, use the `tf.data` module.\n",
            "INFO:tensorflow:Calling model_fn.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/feature_column/feature_column_v2.py:305: Layer.add_variable (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use `layer.add_weight` method instead.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "If using Keras pass *_constraint arguments to layers.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_estimator/python/estimator/canned/linear.py:308: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use `tf.cast` instead.\n",
            "INFO:tensorflow:Done calling model_fn.\n",
            "INFO:tensorflow:Create CheckpointSaverHook.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/array_ops.py:1475: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
            "INFO:tensorflow:Graph was finalized.\n",
            "INFO:tensorflow:Running local_init_op.\n",
            "INFO:tensorflow:Done running local_init_op.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/training/monitored_session.py:882: start_queue_runners (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "To construct input pipelines, use the `tf.data` module.\n",
            "INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmp0xywpl5k/model.ckpt.\n",
            "INFO:tensorflow:loss = 140.70177, step = 0\n",
            "INFO:tensorflow:global_step/sec: 556.812\n",
            "INFO:tensorflow:loss = 26.623554, step = 100 (0.182 sec)\n",
            "INFO:tensorflow:global_step/sec: 613.247\n",
            "INFO:tensorflow:loss = 3.075669, step = 200 (0.163 sec)\n",
            "INFO:tensorflow:global_step/sec: 573.228\n",
            "INFO:tensorflow:loss = 11.793486, step = 300 (0.174 sec)\n",
            "INFO:tensorflow:global_step/sec: 656.329\n",
            "INFO:tensorflow:loss = 6.475086, step = 400 (0.153 sec)\n",
            "INFO:tensorflow:global_step/sec: 635.436\n",
            "INFO:tensorflow:loss = 8.628828, step = 500 (0.157 sec)\n",
            "INFO:tensorflow:global_step/sec: 654.21\n",
            "INFO:tensorflow:loss = 3.5543694, step = 600 (0.152 sec)\n",
            "INFO:tensorflow:global_step/sec: 647.258\n",
            "INFO:tensorflow:loss = 4.21371, step = 700 (0.155 sec)\n",
            "INFO:tensorflow:global_step/sec: 641.262\n",
            "INFO:tensorflow:loss = 12.477314, step = 800 (0.156 sec)\n",
            "INFO:tensorflow:global_step/sec: 604.788\n",
            "INFO:tensorflow:loss = 3.3233314, step = 900 (0.164 sec)\n",
            "INFO:tensorflow:Saving checkpoints for 1000 into /tmp/tmp0xywpl5k/model.ckpt.\n",
            "INFO:tensorflow:Loss for final step: 2.008172.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow_estimator.python.estimator.canned.linear.LinearRegressor at 0x7f88712de9b0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K5OodQmVWWMn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "input_fu_predict = tf.estimator.inputs.numpy_input_fn({'x':np.linspace(0,10,10)},shuffle=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MgKEg9csXhc4",
        "colab_type": "code",
        "outputId": "50e8ca4d-1a2e-4e48-dba0-cc71e1089aba",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        }
      },
      "source": [
        "list(estimator.predict(input_fn=input_fu_predict))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Calling model_fn.\n",
            "INFO:tensorflow:Done calling model_fn.\n",
            "INFO:tensorflow:Graph was finalized.\n",
            "INFO:tensorflow:Restoring parameters from /tmp/tmp0xywpl5k/model.ckpt-1000\n",
            "INFO:tensorflow:Running local_init_op.\n",
            "INFO:tensorflow:Done running local_init_op.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[{'predictions': array([4.364997], dtype=float32)},\n",
              " {'predictions': array([5.025754], dtype=float32)},\n",
              " {'predictions': array([5.686511], dtype=float32)},\n",
              " {'predictions': array([6.347268], dtype=float32)},\n",
              " {'predictions': array([7.008025], dtype=float32)},\n",
              " {'predictions': array([7.668782], dtype=float32)},\n",
              " {'predictions': array([8.329539], dtype=float32)},\n",
              " {'predictions': array([8.990296], dtype=float32)},\n",
              " {'predictions': array([9.651054], dtype=float32)},\n",
              " {'predictions': array([10.3118105], dtype=float32)}]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g-zw1vnKXwvT",
        "colab_type": "code",
        "outputId": "d7a1d46e-1992-4199-d5ff-3d7b4f62162b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 124
        }
      },
      "source": [
        "predictions=[]\n",
        "\n",
        "for x in estimator.predict(input_fn=input_fu_predict):\n",
        "  predictions.append(x['predictions'])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Calling model_fn.\n",
            "INFO:tensorflow:Done calling model_fn.\n",
            "INFO:tensorflow:Graph was finalized.\n",
            "INFO:tensorflow:Restoring parameters from /tmp/tmp0xywpl5k/model.ckpt-1000\n",
            "INFO:tensorflow:Running local_init_op.\n",
            "INFO:tensorflow:Done running local_init_op.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tial8MhnYzYS",
        "colab_type": "code",
        "outputId": "f909fe9b-e9d1-4655-ba98-67a982a7aeaa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "df.sample(n=250).plot(kind=\"scatter\",x=\"X_data\",y=\"Y\")\n",
        "plt.plot(np.linspace(0,10,10),predictions,'r')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f87f61cf4e0>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EYO0ncosZneJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}